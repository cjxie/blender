diff --git a/intern/cycles/kernel/camera/projection.h b/intern/cycles/kernel/camera/projection.h
index 52d2e328..d5ce3288 100644
--- a/intern/cycles/kernel/camera/projection.h
+++ b/intern/cycles/kernel/camera/projection.h
@@ -164,6 +164,69 @@ ccl_device float2 direction_to_fisheye_lens_polynomial(
   return make_float2(u, v);
 }
 
+ccl_device float3 mei_to_direction(float u, float v,float imageWidth, float imageHeight,float radiusPixels,
+	float xi, float4 distortion, float4 projection) 
+	{
+    float k1, k2, p1, p2;
+    k1 = distortion[0];
+    k2 = distortion[1];
+    p1 = distortion[2];
+    p2 = distortion[3];
+    float gamma1, gamma2, u0, v0;
+    gamma1 = projection[0];
+    gamma2 = projection[1];
+    u0 = projection[2];
+    v0 = projection[3];
+
+    float mx_d, my_d, mx2_d, mxy_d, my2_d, mx_u, my_u;
+    float rho2_d, rho4_d, radDist_d, Dx_d, Dy_d, inv_denom_d;
+
+		// scale coordinates and shift center
+		u = u * imageWidth - u0;
+		v = imageHeight * (1.f - v) - v0;
+
+    if(u*u + v*v > imageWidth*imageWidth/4)
+			return make_float3(0.f, 0.f, 0.f);
+
+		if(radiusPixels > 0.f && u*u + v*v > radiusPixels*radiusPixels)
+			return make_float3(0.f, 0.f, 0.f);
+
+		mx_d = u / gamma1;
+		my_d = v / gamma2;
+
+		// Apply inverse distortion model
+		// proposed by Heikkila
+		mx2_d = mx_d * mx_d;
+		my2_d = my_d * my_d;
+		mxy_d = mx_d * my_d;
+		rho2_d = mx2_d + my2_d;
+		rho4_d = rho2_d * rho2_d;
+		radDist_d = k1 * rho2_d + k2 * rho4_d;
+		Dx_d = mx_d * radDist_d + p2 * (rho2_d + 2 * mx2_d) + 2 * p1 * mxy_d;
+		Dy_d = my_d * radDist_d + p1 * (rho2_d + 2 * my2_d) + 2 * p2 * mxy_d;
+		inv_denom_d = 1 / (1 + 4 * k1 * rho2_d + 6 * k2 * rho4_d + 8 * p1 * my_d + 8 * p2 * mx_d);
+
+		mx_u = mx_d - inv_denom_d * Dx_d;
+		my_u = my_d - inv_denom_d * Dy_d;
+
+		// Reuse variable
+		rho2_d = mx_u * mx_u + my_u * my_u;
+		float z = 1 - xi * (rho2_d + 1) / (xi + sqrt(1 + (1 - xi * xi) * rho2_d));
+		const float invnorm = 1.f / sqrtf(rho2_d + z*z);
+		
+		return make_float3(z * invnorm, -mx_u * invnorm, -my_u * invnorm);
+
+	}
+
+
+ccl_device float2 direction_to_mei(float3 dir,float imageWidth,float imageHeight,
+	float xi, float4 distortion,
+	float4 projection)
+{
+	// Not implemented yet.
+	return make_float2(0.0f, 0.0f);
+}
+
 /* Mirror Ball <-> Cartesion direction */
 
 ccl_device float3 mirrorball_to_direction(float u, float v)
@@ -241,6 +304,9 @@ ccl_device_inline float3 panorama_to_direction(ccl_constant KernelCamera *cam, f
                                                   cam->fisheye_fov,
                                                   cam->sensorwidth,
                                                   cam->sensorheight);
+    case PANORAMA_MEI:
+		return mei_to_direction(u, v, cam->width, cam->height, cam->radius * cam->height / 2.f,
+								cam->xi, cam->mei_distortion, cam->mei_projection);
     case PANORAMA_FISHEYE_EQUISOLID:
     default:
       return fisheye_equisolid_to_direction(
@@ -265,6 +331,9 @@ ccl_device_inline float2 direction_to_panorama(ccl_constant KernelCamera *cam, f
                                                   cam->fisheye_lens_polynomial_coefficients,
                                                   cam->sensorwidth,
                                                   cam->sensorheight);
+    case PANORAMA_MEI:
+		return direction_to_mei(dir,cam->width, cam->height,
+								cam->xi, cam->mei_distortion, cam->mei_projection);
     case PANORAMA_FISHEYE_EQUISOLID:
     default:
       return direction_to_fisheye_equisolid(
diff --git a/intern/cycles/kernel/types.h b/intern/cycles/kernel/types.h
index 046f9eff..eb88e456 100644
--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -548,6 +548,8 @@ enum PanoramaType {
   PANORAMA_MIRRORBALL = 3,
   PANORAMA_FISHEYE_LENS_POLYNOMIAL = 4,
   PANORAMA_EQUIANGULAR_CUBEMAP_FACE = 5,
+  PANORAMA_OMNIDIRECTION = 6,
+  PANORAMA_MEI = 7,
 
   PANORAMA_NUM_TYPES,
 };
@@ -1088,6 +1090,11 @@ typedef struct KernelCamera {
   float4 equirectangular_range;
   float4 fisheye_lens_polynomial_coefficients;
 
+  float xi;
+  float4 mei_distortion;
+  float4 mei_projection;
+  float radius;
+
   /* stereo */
   float interocular_offset;
   float convergence_distance;
diff --git a/intern/cycles/scene/camera.cpp b/intern/cycles/scene/camera.cpp
index e53eafb8..4f5070e5 100644
--- a/intern/cycles/scene/camera.cpp
+++ b/intern/cycles/scene/camera.cpp
@@ -90,6 +90,8 @@ NODE_DEFINE(Camera)
   panorama_type_enum.insert("fisheye_equidistant", PANORAMA_FISHEYE_EQUIDISTANT);
   panorama_type_enum.insert("fisheye_equisolid", PANORAMA_FISHEYE_EQUISOLID);
   panorama_type_enum.insert("fisheye_lens_polynomial", PANORAMA_FISHEYE_LENS_POLYNOMIAL);
+  panorama_type_enum.insert("omnidirection", PANORAMA_OMNIDIRECTION);
+  panorama_type_enum.insert("mei", PANORAMA_MEI);
   SOCKET_ENUM(panorama_type, "Panorama Type", panorama_type_enum, PANORAMA_EQUIRECTANGULAR);
 
   SOCKET_FLOAT(fisheye_fov, "Fisheye FOV", M_PI_F);
@@ -102,6 +104,18 @@ NODE_DEFINE(Camera)
   SOCKET_FLOAT(fov_pre, "FOV Pre", M_PI_4_F);
   SOCKET_FLOAT(fov_post, "FOV Post", M_PI_4_F);
 
+  // Initialize the ui interface node with default value
+  SOCKET_FLOAT(xi, "Mirror parameter", 1);
+  SOCKET_FLOAT(k1, "Distortion k1", 0);
+  SOCKET_FLOAT(k2, "Distortion k2", 0);
+  SOCKET_FLOAT(p1, "Distortion p1", 0);
+  SOCKET_FLOAT(p2, "Distortion p2", 0);
+  SOCKET_FLOAT(gamma1, "Fx",660);
+  SOCKET_FLOAT(gamma2, "Fy",660);
+  SOCKET_FLOAT(u0, "cx",960);
+  SOCKET_FLOAT(v0, "cy", 540);
+  SOCKET_FLOAT(radius, "radius", 0.0f);
+
   SOCKET_FLOAT(fisheye_polynomial_k0, "Fisheye Polynomial K0", 0.0f);
   SOCKET_FLOAT(fisheye_polynomial_k1, "Fisheye Polynomial K1", 0.0f);
   SOCKET_FLOAT(fisheye_polynomial_k2, "Fisheye Polynomial K2", 0.0f);
@@ -421,6 +435,11 @@ void Camera::update(Scene *scene)
   kcam->fisheye_lens_polynomial_coefficients = make_float4(
       fisheye_polynomial_k1, fisheye_polynomial_k2, fisheye_polynomial_k3, fisheye_polynomial_k4);
 
+  kcam->xi = xi;
+  kcam->mei_distortion = make_float4(k1, k2, p1, p2);
+  kcam->mei_projection = make_float4(gamma1, gamma2, u0, v0);
+  kcam->radius = radius;
+
   switch (stereo_eye) {
     case STEREO_LEFT:
       kcam->interocular_offset = -interocular_distance * 0.5f;
diff --git a/intern/cycles/scene/camera.h b/intern/cycles/scene/camera.h
index 81838da3..39c3794d 100644
--- a/intern/cycles/scene/camera.h
+++ b/intern/cycles/scene/camera.h
@@ -87,6 +87,18 @@ class Camera : public Node {
   NODE_SOCKET_API(float, fisheye_polynomial_k3)
   NODE_SOCKET_API(float, fisheye_polynomial_k4)
 
+  // Mei
+  NODE_SOCKET_API(float, xi)
+  NODE_SOCKET_API(float, k1)
+  NODE_SOCKET_API(float, k2)
+  NODE_SOCKET_API(float, p1)
+  NODE_SOCKET_API(float, p2)
+  NODE_SOCKET_API(float, gamma1)
+  NODE_SOCKET_API(float, gamma2)
+  NODE_SOCKET_API(float, u0)
+  NODE_SOCKET_API(float, v0)
+  NODE_SOCKET_API(float, radius)
+
   /* panorama stereo */
   NODE_SOCKET_API(StereoEye, stereo_eye)
   NODE_SOCKET_API(bool, use_spherical_stereo)
